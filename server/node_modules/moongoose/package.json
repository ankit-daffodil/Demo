{
  "name": "moongoose",
  "version": "0.0.5",
  "description": "![moongoose](https://i.kinja-img.com/gawker-media/image/upload/s--wbCHfA3R--/c_fit,fl_progressive,q_80,w_636/17hnwnvcypnk6jpg.jpg)",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/ZJONSSON/moongoose"
  },
  "author": {
    "name": "Ziggy Jonsson https://github.com/zjonsson"
  },
  "license": "MIT",
  "dependencies": {
    "ajv": "^4.1.1",
    "bluebird": "^3.4.0",
    "mongodb": "^2.2.6",
    "streamz": "^1.5.2"
  },
  "readme": "![moongoose](https://i.kinja-img.com/gawker-media/image/upload/s--wbCHfA3R--/c_fit,fl_progressive,q_80,w_636/17hnwnvcypnk6jpg.jpg)\n\nQ: Why do people use mongoose?\n\nHere are some of the benefits:\n* You can execute commands right away without having to wait for `mongo.connect()`\n* You get schema validation\n* You can create synthetic joins via populate\n\nHowever, there are some potential downsides:\n* Mongoose is global object - causing potential conflicts\n* Mongoose can be very slow with all the getters, setters and whatnot\n* the `lean()` options ends up being slower than native\n* It can be difficult to understand what is going on behind the scenes\n* The schema is non-standard\n\nMoongoose to the rescue\n\n* Just over 100 LOC - simple wrapper around native\n* No need to wait for connection before executing commands\n* Efficient `populate` for streaming and findOnes\n* Validation with JSON schema\n* Acts global but can be cloned for ringfencing different instances\n\n### Examples\n\n#### Example: fetching data\n\n```js\nvar moongoose = require('moongoose');\n\nmoongoose.connect('mongodb://localhost:27017/test');\n\n// Find one record and populate\nmoongoose.collection('test')\n  .findOne({})\n  .populate('org_id','orgs')\n  .then(console.log);\n\n// Find all record, populate and stream\nmoongoose.collection('test')\n  .find()\n  .populate('org_id','orgs')\n  .stream()\n  .pipe(...);\n\n// Find all records, poopulate and capture into array\nmoongoose.collection('test')\n  .find()\n  .populate('org_id','orgs')\n  .toArray()\n  .then(console.log)\n```\n\n#### Example: save a record with validation\n\n```js\nvar test = moongoose.collection('test',{\n  schema: {\n    additionalProperties: false,\n    properties: {\n      answer: {type:'boolean'},\n      fail: {type:'boolean'}\n    }\n  },\n  validate : function(data) {\n    if (data.fail)\n      throw 'Failed custom validation';\n  }\n});\n\n// This successfully save the record - junk is removed in validation\ntest.save({\n  answer: true,\n  junk: 'this gets removed'\n})\n.then(d => console.log(d.ops[0]),console.log);\n\n// This fails validation and is not saved\ntest.save({\n  answer: 'not a boolean'\n})\n.then(d => console.log(d.ops[0]),console.log);\n\n// This passes json-schema validation but fails custom validation\ntest.save({\n  answer: true,\n  fail: true\n})\n.then(d => console.log(d.ops[0]),console.log);\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ZJONSSON/moongoose/issues"
  },
  "_id": "moongoose@0.0.5",
  "dist": {
    "shasum": "8072cf9b86ad5171ae88baeceb547cda6f1fde68"
  },
  "_from": "moongoose@",
  "_resolved": "https://registry.npmjs.org/moongoose/-/moongoose-0.0.5.tgz"
}
